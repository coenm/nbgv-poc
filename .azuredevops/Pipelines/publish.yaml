trigger: none # We only want to trigger manually or based on resources
pr: none

resources:
  pipelines:
  - pipeline: CI
    source: nbgv-poc.Build
    trigger:
      tags:
      - auto-release

variables:
- group: Publishing secrets


jobs:
- job: release
  pool:
    vmImage: ubuntu-latest
  steps:
  - checkout: none
  - powershell: |
      Write-Host "##vso[build.updatebuildnumber]$(resources.pipeline.CI.runName)"
      if ('$(resources.pipeline.CI.runName)'.Contains('-')) {
        Write-Host "##vso[task.setvariable variable=IsPrerelease]true"
      } else {
        Write-Host "##vso[task.setvariable variable=IsPrerelease]false"
      }
    displayName: âš™ Set up pipeline
  - task: UseDotNet@2
    displayName: âš™ Install .NET SDK
    inputs:
      packageType: sdk
      version: 6.x
  - task: UseDotNet@2
    displayName: âš™ Install .NET SDK 7.x
    inputs:
      packageType: sdk
      version: 7.x
  - powershell: |
      dotnet tool install --global dotnet-releaser
    displayName: Install releaser
  - download: CI
    artifact: installer
    displayName: ðŸ”» Download deployables-Windows artifact
    patterns: 'installer/*'
  - download: CI
    artifact: publisher
    displayName: ðŸ”» Download publisher
    patterns: 'publisher/*'
  - task: GitHubRelease@1
    displayName: ðŸ“¢ GitHub release (create)
    inputs:
      gitHubConnection: github_coenm_pan
      repositoryName: $(Build.Repository.Name)
      target: $(resources.pipeline.CI.sourceCommit)
      tagSource: userSpecifiedTag
      tag: v$(resources.pipeline.CI.runName)
      title: v$(resources.pipeline.CI.runName)
      isDraft: true # After running this step, visit the new draft release, edit, and publish.
      isPreRelease: $(IsPrerelease)
      assets: $(Pipeline.Workspace)/CI/installer/*.dll
      changeLogCompareToRelease: lastNonDraftRelease
      changeLogType: issueBased
      changeLogLabels: |
        [
          { "label" : "breaking change", "displayName" : "Breaking changes", "state" : "closed" },
          { "label" : "bug", "displayName" : "Fixes", "state" : "closed" },
          { "label" : "enhancement", "displayName": "Enhancements", "state" : "closed" }
        ]
  - powershell: |
     Start-Sleep -Seconds 60  
    displayName: 'Delay for 1 minutes'
  - powershell: |
      dotnet-releaser changelog --update --github-token $(GITHUB_TOKEN) $(Pipeline.Workspace)/CI/publisher/dotnet-releaser.toml $(resources.pipeline.CI.runName)
    displayName: âš™ Release update text
      

  # - task: GitHubRelease@1
  #   displayName: ðŸ“¢ GitHub release (create)
  #   inputs:
  #     gitHubConnection: github_coenm_pan
  #     repositoryName: $(Build.Repository.Name)
  #     target: $(resources.pipeline.CI.sourceCommit)
  #     tagSource: userSpecifiedTag
  #     tag: v$(resources.pipeline.CI.runName)
  #     title: v$(resources.pipeline.CI.runName)
  #     isDraft: true # After running this step, visit the new draft release, edit, and publish.
  #     isPreRelease: $(IsPrerelease)
  #     assets: $(Pipeline.Workspace)/CI/installer/*.dll
  #     changeLogCompareToRelease: lastNonDraftRelease
  #     changeLogType: issueBased
  #     changeLogLabels: |
  #       [
  #         { "label" : "breaking change", "displayName" : "Breaking changes", "state" : "closed" },
  #         { "label" : "bug", "displayName" : "Fixes", "state" : "closed" },
  #         { "label" : "enhancement", "displayName": "Enhancements", "state" : "closed" }
  #       ]





# stages:
# - stage: GitHubRelease
#   displayName: GitHub Release
#   jobs:
#   - deployment: create
#     pool:
#       vmImage: ubuntu-latest
#     environment: No-Approval
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: none
#           - powershell: |
#               Write-Host "##vso[build.updatebuildnumber]$(resources.pipeline.CI.runName)"
#             displayName: Set pipeline name
#           - task: GitHubRelease@1
#             displayName: GitHub release (create)
#             inputs:
#               gitHubConnection: github_coenm_pan
#               repositoryName: $(Build.Repository.Name)
#               target: $(resources.pipeline.CI.sourceCommit)
#               tagSource: userSpecifiedTag
#               tag: v$(resources.pipeline.CI.runName)
#               title: v$(resources.pipeline.CI.runName)
#               isDraft: true
#               changeLogCompareToRelease: lastNonDraftRelease
#               changeLogType: issueBased
#               changeLogLabels: |
#                 [
#                   { "label" : "bug", "displayName" : "Fixes", "state" : "closed" },
#                   { "label" : "enhancement", "displayName": "Enhancements", "state" : "closed" }
#                 ]

# - stage: nuget_org
#   displayName: nuget.org
#   dependsOn: GitHubRelease
#   jobs:
#   - deployment: push
#     pool:
#       vmImage: ubuntu-latest
#     environment: No-Approval
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - download: CI
#             artifact: packages
#             displayName: Download nuget packages artifact
#             patterns: 'packages/*'
#           - task: NuGetToolInstaller@1
#             displayName: Use NuGet 5.x
#             inputs:
#               versionSpec: 5.x
#           - task: NuGetCommand@2
#             displayName: NuGet push nupkg
#             inputs:
#               command: push
#               packagesToPush: '$(Pipeline.Workspace)/CI/packages/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
#               nuGetFeedType: external
#               publishFeedCredentials: nuget.org     